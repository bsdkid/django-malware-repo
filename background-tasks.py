import os
import sys
import hashlib
import json
import requests

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "csirt.settings")
import django
from django.conf import settings
django.setup()
from malware.models import malwareFile

# VirusTotal API Key
VT_API_KEY = ''
# Palo Alto WildFire API Key
WF_API_KEY = ''
# Hybrid Analysis API Key/Secret
HA_API_KEY = ''
HA_SECRET  = ''
debug = True

# Calculate the SHA256 and MD5 checksums of the files.
def get_checksum(filename, block_size=65536):
	if debug is True:
		print ' - Generating crypto checksums'
	sha256 = hashlib.sha256()
	md5 = hashlib.md5()
	with open(filename, 'rb') as f:
		for block in iter(lambda: f.read(block_size), b''):
			sha256.update(block)
			md5.update(block)
	return sha256.hexdigest() + "#####" + md5.hexdigest()

# Upload the file to VirusTotal.
def upload_to_vt(filename):
	if debug is True:
		print ' - Uploading file to VT for analysis'
	if not os.path.isfile(filename):
		raise '%s does not seem to exist' % filename
	params = {'apikey': VT_API_KEY}
	files = {'file': (filename, open(filename, 'rb'))}
	response = requests.post('https://www.virustotal.com/vtapi/v2/file/scan', files=files, params=params)
	json_response = response.json() 
	return json_response

# Get the VT data for a specific MD5.
def get_vt_score(md5, filename):
	if debug is True:
		print ' - Checking VT for file data'
	params = {'apikey': VT_API_KEY, 'resource': md5}
	response = requests.get('https://www.virustotal.com/vtapi/v2/file/report', params=params)
	if response.status_code == 200:
		if response.json()['response_code'] == 0:
			if debug is True:
				print '   - Data not found on VT'
			data = upload_to_vt(filename)
			return None
			#return data
		elif response.json()['response_code'] == -2:
			if debug is True:
				print '   - VT still processing this file'
			return None
		else:
			if debug is True:
				print '   - Data exists on VT and obtained'
			return response.json()

# https://www.paloaltonetworks.com/documentation/61/wildfire/wf_admin/wildfire-api/wildfire-api-file-submission-methods#_84244
def upload_to_wf(filename):
	if debug is True:
		print ' - Uploading file to WF for analysis'
	files = {'file': open(filename,'rb')}
	params = {'apikey': WF_API_KEY}
	response = requests.post('https://wildfire.paloaltonetworks.com/publicapi/submit/file', files=files, data=params)
	if response.status_code == 200:
		return response
	else:
		print 'Error uploading to WF'
		print response.status_code
		print response.text

# Get the wildfire report data.
# https://www.paloaltonetworks.com/documentation/61/wildfire/wf_admin/wildfire-api/query-for-a-wildfire-pdf-or-xml-report
def get_wf_report(md5, filename):
	params = {'hash': md5, 'apikey': WF_API_KEY, 'format': 'xml'}
	response = requests.post('https://wildfire.paloaltonetworks.com/publicapi/get/report', data=params)
	if response.status_code == 200:
		if debug is True:
			print ' - Data exists on WF and obtained'
		return response.text
	elif response.status_code == 404:
		if debug is True:
			print ' - Data not found on WF (response code: %s)' % response.status_code
		response = upload_to_wf(filename)
		return response
	else:
		print 'An error occured getting WF data'
		print response.status_code
		print response.text

# Get the Hybrid Analysis report data
# https://www.hybrid-analysis.com/apikeys/info
def get_ha_report(md5, filename):
	params = {'apikey': HA_API_KEY, 'secret': HA_SECRET}
	headers = {'user-agent': 'VxStream'}
	response = requests.get('https://www.hybrid-analysis.com/api/scan/' + md5, headers=headers, params=params)
	#response = requests.get('http://127.0.0.1/' + md5, params=params)
	if response.status_code == 200:
		json_data = json.loads(response.text)
		if json_data['response'] == []:
			if debug is True:
				print ' - No data exists on HA'
			return "No HA data"
		else:
			if debug is True:
				print ' - Data exists on HA and obtained'
			#print json_data['response']
			return response.text
	else:
		print 'An error occured getting HA data'
		print response.status_code
		print response.text

# Start parsing DB data and looking for files without information.
for x in malwareFile.objects.filter(sha256=''):
	fullpath = 'uploads/' + x.filename
	values = get_checksum(fullpath).split('#####')
	if debug is True:
		print "   - Filename: %s\n     - SHA256: %s\n        - MD5: %s\n" % (x.filename, values[0], values[1])
	x.sha256 = values[0]
	x.md5sum = values[1]
	x.save()

if debug is True:
	print 'Checking for files with no VT score...'

for x in malwareFile.objects.filter(virusTotal=''):
	fullpath = 'uploads/' + x.filename
	if debug is True:
		print ' - File found (%s)' % fullpath
	vtdata = get_vt_score(x.md5sum, fullpath)
	if vtdata is not None:
		if vtdata['total']:
			x.virusTotal = '%s/%s' % (vtdata['positives'], vtdata['total'])
			x.virusTotalPerc = int((float(vtdata['positives'])/float(vtdata['total'])) * 100)
			x.virusTotalLink = vtdata['permalink']
			x.save()
	#else:
	#	print vtdata
			if debug is True:
				print ' - VT: %s/%s' % (str(vtdata['positives']), str(vtdata['total']))

if debug is True:
	print 'Checking for files with no WF data...'

for x in malwareFile.objects.filter(wildFire=''):
	fullpath = 'uploads/' + x.filename
	if debug is True:
		print ' - File found (%s)' % fullpath
	response = get_wf_report(x.md5sum, fullpath)
	if response is not None:
		if debug is True:
			print ' - Saving WF report'
		x.wildFire = response
		x.save()

if debug is True:
	print 'Checking for files with no HA data...'

for x in malwareFile.objects.filter(hybridAnalysis=''):
	fullpath = 'uploads/' + x.filename
	if debug is True:
		print ' - File found (%s)' % fullpath
	response = get_ha_report(x.md5sum, fullpath)
	if debug is True:
		print ' - HA data obtained, saving to DB.'
	x.hybridAnalysis = response
	x.save()
