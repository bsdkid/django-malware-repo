import requests
from django.shortcuts import render
from django.http import HttpResponse, StreamingHttpResponse
from django.template import loader
from .models import malwareFile
from django.conf import settings

# File downloads
import os
import mimetypes
from wsgiref.util import FileWrapper

# Stix Stuff
from stix.core import STIXPackage
from stix.report import Report
from stix.report.header import Header
from stix.report import Indicator

# Default view of malware
def index(request):
	data = malwareFile.objects.order_by('-uploadDate').all()
	template = loader.get_template('malware_view.html')
	context = { 'data': data }
	return HttpResponse(template.render(context, request))

# Show WildFire XML data
def wfdata(request, md5sum):
	WF_API_KEY = '483d94d1852ab36988316aef396597dc'
	params = {'hash': md5sum, 'apikey': WF_API_KEY, 'format': 'pdf'}
	try:
		response = requests.post('https://wildfire.paloaltonetworks.com/publicapi/get/report', data=params)
		if response:
			if response.status_code == 200:
				return HttpResponse(response.content, content_type='application/pdf')
			elif response.status_code == 404:
				return HttpResponse('Wildfire is still processing this file, please try again later.')
			else:
				return HttpResponse('Got a weird error code back...')
		else:
			return HttpResponse('Wildfire did not respond, please try again later.')
	except:
		return HttpResponse('Wildfire did not respond, please try again later.')

# Show Hybrid Analysis JSON data
def hadata(request, sha256):
	data = malwareFile.objects.filter(sha256=sha256)
	return HttpResponse(data[0].hybridAnalysis, content_type='application/json')

# Generate a STIX file
def genStix(request,sha256):
	data = malwareFile.objects.filter(sha256=sha256)
	stix_package = STIXPackage()                           # Create an instance of STIXPackage
	stix_report = Report()                                 # Create a Report instance
	stix_report.header = Header()                          # Create a header for the report
	stix_report.md5 = Indicator()
	stix_report.sha256 = Indicator()
	stix_report.header.description = data[0].filename      # Set the description
	stix_report.sha256.title = "SHA256"
	stix_report.sha256.description= data[0].sha256
	stix_report.md5.title = "MD5"
	stix_report.md5.description= data[0].md5sum
	stix_package.add_indicator(stix_report.md5)
	stix_package.add_indicator(stix_report.sha256)
	stix_package.add(stix_report)                          # Add the report to our STIX Package

	return HttpResponse(stix_package.to_xml(), content_type='application/xhtml+xml')

# Download the malware file
# Some code shamelessly stolen from http://stackoverflow.com/questions/8600843/serving-large-files-with-high-loads-in-django
def getFile(request, sha256):
	data = malwareFile.objects.filter(sha256=sha256)
	filename = os.path.join(settings.UPLOAD_DIR, data[0].filename)
	chunk_size = 8192
	response = StreamingHttpResponse(FileWrapper(open(filename, 'rb'), chunk_size),
	                       content_type=mimetypes.guess_type(filename)[0])
	response['Content-Length'] = os.path.getsize(filename)    
	response['Content-Disposition'] = "attachment; filename=%s" % data[0].filename
	return response