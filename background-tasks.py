import os
import sys
import hashlib
import json
import requests
import logging

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "csirt.settings")
import django
from django.conf import settings
django.setup()
from malware.models import malwareFile
requests.packages.urllib3.disable_warnings()

FORMAT = "[%(filename)s:%(lineno)s - %(funcName)20s() ] %(message)s"
logging.basicConfig(filename='bgcheck.log', format=FORMAT, level=logging.DEBUG)

# VirusTotal API Key
VT_API_KEY = ''
# Palo Alto WildFire API Key
WF_API_KEY = ''
# Hybrid Analysis Information
HA_API_KEY = ''
HA_SECRET  = ''
HA_ENV_ID  = ''
HA_URL     = ''

# Uploads directory
UPLOAD_DIR = 'uploads/'

# Calculate the SHA256 and MD5 checksums of the files.
def get_checksum(filename, block_size=65536):
	logging.debug('Generating crypto checksums')
	sha256 = hashlib.sha256()
	md5 = hashlib.md5()
	with open(filename, 'rb') as f:
		for block in iter(lambda: f.read(block_size), b''):
			sha256.update(block)
			md5.update(block)
	return sha256.hexdigest() + "#####" + md5.hexdigest()

# Upload the file to VirusTotal.
def upload_to_vt(filename):
	logging.debug('Uploading file to VT for analysis.')
	if not os.path.isfile(filename):
		logging.debug('%s does not seem to exist' % filename)
	else:
		params = {'apikey': VT_API_KEY}
		files = {'file': (filename, open(filename, 'rb'))}
		try:
			response = requests.post('https://www.virustotal.com/vtapi/v2/file/scan', files=files, params=params)
			json_response = response.json() 
		except:
			response = None
			json_response = response
		return json_response

# Get the VT data for a specific MD5.
def get_vt_score(md5, filename):
	logging.debug('Checking VT for file data')
	params = {'apikey': VT_API_KEY, 'resource': md5}
	response = requests.get('https://www.virustotal.com/vtapi/v2/file/report', params=params)
	if response.status_code == 200:
		return response.json()

# Upload to WildFire
# https://www.paloaltonetworks.com/documentation/61/wildfire/wf_admin/wildfire-api/wildfire-api-file-submission-methods#_84244
def upload_to_wf(filename):
	logging.debug('Uploading file to WF for analysis...')
	files = {'file': open(filename,'rb')}
	params = {'apikey': WF_API_KEY}
	response = requests.post('https://wildfire.paloaltonetworks.com/publicapi/submit/file', files=files, data=params)
	if response.status_code == 200:
		return response
	elif response.status_code == 418:
		logging.debug('Unsupported File Type for WildFire')
	else:
		logging.info('Error uploading to WF.')
		# print response.status_code
		# print response.text

# Get the wildfire report data.
# https://www.paloaltonetworks.com/documentation/61/wildfire/wf_admin/wildfire-api/query-for-a-wildfire-pdf-or-xml-report
def get_wf_report(md5, filename):
	params = {'hash': md5, 'apikey': WF_API_KEY, 'format': 'xml'}
	response = requests.post('https://wildfire.paloaltonetworks.com/publicapi/get/report', data=params)
	if response.status_code == 200:
		logging.debug('Data exists on WF and obtained')
		return response.text
	elif response.status_code == 404:
		logging.debug('Data not found on WF (response code: %s)' % response.status_code)
		response = upload_to_wf(filename)
		return response
	else:
		logging.info('An error occured getting WF data')
		# print response.status_code
		# print response.text

def get_ha_status(sha256, filename):
	params = {'apikey': HA_API_KEY, 'secret': HA_SECRET, 'environmentId': HA_ENV_ID}
	headers = {'user-agent': 'VxStream'}
	response = requests.get(HA_URL + '/api/state/' + sha256, headers=headers, params=params)
	if response.status_code == 200:
		json_data = json.loads(response.text)
		return json_data['response']['state']
	else:
		logging.info('An error occured getting HA data')
		# print response.status_code
		# print response.text

# Provide a link to the Hybrid Analysis report data
def get_ha_report(sha256):
	return HA_URL + '/sample/' + sha256 + '?environmentId=' + HA_ENV_ID

# Upload to the Hybrid Analysis
def upload_to_ha(filename):
	logging.debug('Uploading file to HA for analysis')
	files = {'file': open(filename,'rb')}
	params = {'apikey': HA_API_KEY, 'secret': HA_SECRET, 'environmentId': HA_ENV_ID, 'kernelmode': 'true'}
	headers={ "user-agent": "VxStream" }
	response = requests.post('http://sandbox.shadowcsirt.org/api/submit/', headers=headers, files=files, data=params)
	if response.status_code == 200:
		logging.debug('File successfully uploaded to HA.')
	else:
		logging.info('Error uploading to HA.')
		# print response.status_code
		# print response.text

def virusTotalCheck(objects):
	logging.debug('Checking for files with no VT score...')

	for x in objects:
		fullpath = os.path.join(UPLOAD_DIR, x.filename)
		logging.debug('File found (%s)' % fullpath)
		vtResponse = get_vt_score(x.md5sum, fullpath)
		if vtResponse is not None:
			if vtResponse['response_code'] == 0:
				logging.debug('Data not found on VT, uploading sample.')
				upload_to_vt(fullpath)
			elif vtResponse['response_code'] == -2:
				logging.debug('VT still processing this file')
			else:
				logging.debug('Data exists on VT and obtained.')
				if vtResponse['total']:
					logging.debug('VT: %s/%s' % (str(vtResponse['positives']), str(vtResponse['total'])))
					x.virusTotal = '%s/%s' % (vtResponse['positives'], vtResponse['total'])
					x.virusTotalPerc = int((float(vtResponse['positives'])/float(vtResponse['total'])) * 100)
					logging.debug('Writing VT data to DB.')
					x.virusTotalLink = vtResponse['permalink']
					x.save()

def wildFireCheck(objects):
	logging.debug('Checking for files with no WF data...')

	for x in objects:
		fullpath = os.path.join(UPLOAD_DIR, x.filename)
		logging.debug('File found (%s)' % fullpath)
		response = get_wf_report(x.md5sum, fullpath)
		if response is not None:
			logging.debug('Saving WF report to DB.')
			x.wildFire = response
			x.save()

def hybridAnalysisCheck(objects):
	logging.debug('Checking for files with no HA data...')

	for x in objects:
		fullpath = os.path.join(UPLOAD_DIR, x.filename)
		logging.debug('File found (%s)' % fullpath)
		status = get_ha_status(x.sha256, fullpath)
		WAITING_CODES = ['IN_QUEUE', 'IN_PROGRESS', 'ERROR']
		if status == 'SUCCESS':
			logging.debug('SUCCESS code returned from HA.')
			reportURL = get_ha_report(x.sha256)
			logging.debug('Saving Report URL to database.')
			x.hybridAnalysis = reportURL
			x.save()
		elif status not in WAITING_CODES:
			logging.debug('Analysis has not begun, uploading sample.')
			response = upload_to_ha(fullpath)
		else:
			logging.debug('%s code returned, backing off.' % status)

def main():
	# Start parsing DB data and looking for files without information.
	for x in malwareFile.objects.filter(sha256=''):
		fullpath = os.path.join(UPLOAD_DIR, x.filename)
		fileinfo = os.stat(fullpath)
		# The VirusTotal API only supports files of 32MB so we can't deal with them.  Delete.  Sad Panda!
		if fileinfo.st_size > 33554432:
			logging.info('File is too big to support VT API - deleting.')
			malwareFile.objects.filter(file=fullpath).delete()
			os.remove(fullpath)
		else:
			values = get_checksum(fullpath).split('#####')
			logging.debug("Filename: %s\nSHA256: %s\n%s\n" % (x.filename, values[0], values[1]))
			x.sha256 = values[0]
			x.md5sum = values[1]
			x.save()

			virusTotalCheck(malwareFile.objects.filter(virusTotal=''))
			wildFireCheck(malwareFile.objects.filter(wildFire=''))
			hybridAnalysisCheck(malwareFile.objects.filter(hybridAnalysis=''))

if __name__ == '__main__':
	main()
